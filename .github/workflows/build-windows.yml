name: Build Windows Executable

# When to trigger the build
on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
    
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
    
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
  
  # Trigger on new releases/tags
  release:
    types: [published]

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          # x86_64 build on standard Windows runner
          - arch: x64
            runner: windows-latest
            spec_file: PanoramaBridge.spec
            executable_name: PanoramaBridge.exe
            artifact_name: PanoramaBridge-Windows-x64
            release_name: PanoramaBridge-Windows-x64.exe
            python_arch: x64
          # ARM64 build on ARM64 Windows runner
          - arch: arm64
            runner: windows-latest-arm64
            spec_file: PanoramaBridge-arm64.spec
            executable_name: PanoramaBridge-arm64.exe
            artifact_name: PanoramaBridge-Windows-ARM64
            release_name: PanoramaBridge-Windows-ARM64.exe
            python_arch: arm64
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python (${{ matrix.arch }})
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        architecture: ${{ matrix.python_arch }}
        
    - name: Verify Python Architecture
      run: |
        python -c "import platform; print(f'Python platform: {platform.machine()} - {platform.architecture()[0]}')"
        python -c "import sys; print(f'Python executable: {sys.executable}')"
      shell: powershell
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Verify PyQt6 Installation
      run: |
        python -c "import PyQt6.QtCore; print(f'PyQt6 Version: {PyQt6.QtCore.PYQT_VERSION_STR}')"
      shell: powershell
        
    - name: Run tests (x64 only)
      if: matrix.arch == 'x64'
      run: |
        python -m pytest tests/test_upload_history.py tests/test_upload_history_simple.py tests/test_qt_ui.py tests/test_queue_table_integration.py tests/test_table_ordering_and_progress_messages.py tests/test_real_methods_integration.py -v --tb=short
        
    - name: Build executable (${{ matrix.arch }})
      run: |
        pyinstaller build_scripts/${{ matrix.spec_file }}
        
    - name: Verify build (${{ matrix.arch }})
      run: |
        if (Test-Path "dist/${{ matrix.executable_name }}") {
          Write-Host "Build successful for ${{ matrix.arch }}!" -ForegroundColor Green
          $fileInfo = Get-Item "dist/${{ matrix.executable_name }}"
          $sizeInMB = [math]::Round($fileInfo.Length / 1MB, 2)
          Write-Host "File size: $($fileInfo.Length) bytes ($sizeInMB MB)" -ForegroundColor Yellow
          
          # Try to get executable architecture info
          try {
            $archInfo = & dumpbin /headers "dist/${{ matrix.executable_name }}" 2>$null | Select-String "machine"
            if ($archInfo) {
              Write-Host "Executable architecture: $archInfo" -ForegroundColor Yellow
            }
          } catch {
            Write-Host "Could not verify executable architecture (dumpbin not available)" -ForegroundColor Yellow
          }
        } else {
          Write-Host "Build failed for ${{ matrix.arch }} - executable not found!" -ForegroundColor Red
          exit 1
        }
      shell: powershell
      
    - name: Upload executable as artifact (${{ matrix.arch }})
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.sha }}
        path: dist/${{ matrix.executable_name }}
        retention-days: 30
        
    # Only create release assets if this is a tagged release
    - name: Upload to Release (${{ matrix.arch }})
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/${{ matrix.executable_name }}
        asset_name: ${{ matrix.release_name }}
        asset_content_type: application/octet-stream
