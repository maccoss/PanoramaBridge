name: Release Builder (Fallback)

# Fallback release workflow if ARM64 runners are not available
# This attempts to build both architectures but may require cross-compilation
on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        default: ''
        type: string
      release_name:
        description: 'Release name'
        required: false
        default: ''
        type: string
      force_cross_compile:
        description: 'Force cross-compilation for ARM64'
        required: false
        default: 'true'
        type: boolean

# Required permissions for the GITHUB_TOKEN
permissions:
  contents: write
  actions: read

jobs:
  build-fallback:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          # x86_64 build (standard)
          - arch: x64
            spec_file: PanoramaBridge.spec
            executable_name: PanoramaBridge.exe
            artifact_name: PanoramaBridge-Windows-x64-fallback
            release_name: PanoramaBridge-Windows-x64.exe
            python_arch: x64
            description: "Intel/AMD 64-bit"
          # ARM64 build (cross-compiled)
          - arch: arm64
            spec_file: PanoramaBridge-arm64.spec
            executable_name: PanoramaBridge-arm64.exe
            artifact_name: PanoramaBridge-Windows-ARM64-fallback
            release_name: PanoramaBridge-Windows-ARM64.exe
            python_arch: x64  # Use x64 Python but target ARM64
            description: "ARM64/Snapdragon (Cross-compiled)"
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        architecture: ${{ matrix.python_arch }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install pytest
        
    - name: Run tests (x64 only)
      if: matrix.arch == 'x64'
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true
        
    - name: Build executable (${{ matrix.arch }})
      run: |
        if ("${{ matrix.arch }}" -eq "arm64") {
          Write-Host "WARNING: Cross-compiling ARM64 on x64 - this may not work perfectly!" -ForegroundColor Yellow
          Write-Host "For best results, use native ARM64 runners in the main release workflow." -ForegroundColor Yellow
          Write-Host ""
        }
        
        Write-Host "Building PanoramaBridge executable for ${{ matrix.arch }}..." -ForegroundColor Cyan
        pyinstaller build_scripts/${{ matrix.spec_file }}
        
        if (Test-Path "dist/${{ matrix.executable_name }}") {
          Write-Host "Build completed for ${{ matrix.arch }}!" -ForegroundColor Green
          
          $fileInfo = Get-Item "dist/${{ matrix.executable_name }}"
          $sizeInMB = [math]::Round($fileInfo.Length / 1MB, 2)
          $hash = (Get-FileHash "dist/${{ matrix.executable_name }}" -Algorithm SHA256).Hash
          
          Write-Host "File: ${{ matrix.executable_name }}" -ForegroundColor Yellow
          Write-Host "Size: $($fileInfo.Length) bytes ($sizeInMB MB)" -ForegroundColor Yellow
          Write-Host "SHA256: $hash" -ForegroundColor Yellow
          
          if ("${{ matrix.arch }}" -eq "arm64") {
            Write-Host "WARNING: ARM64 executable built via cross-compilation - test thoroughly on ARM64 hardware!" -ForegroundColor Yellow
          }
          
          # Save info for later steps
          echo "EXECUTABLE_SIZE_${{ matrix.arch }}=$($fileInfo.Length)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "EXECUTABLE_SIZE_MB_${{ matrix.arch }}=$sizeInMB" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "EXECUTABLE_HASH_${{ matrix.arch }}=$hash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        } else {
          Write-Host "Build failed for ${{ matrix.arch }} - executable not found!" -ForegroundColor Red
          exit 1
        }
      shell: powershell
      
    - name: Create build info (${{ matrix.arch }})
      run: |
        $buildInfo = @"
        PanoramaBridge Windows Build (${{ matrix.arch }}) - FALLBACK
        =========================================================
        
        Architecture: ${{ matrix.arch }} (${{ matrix.description }})
        Build Method: $(if ("${{ matrix.arch }}" -eq "arm64") { "Cross-compiled on x64" } else { "Native" })
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        Git Commit: ${{ github.sha }}
        Git Ref: ${{ github.ref }}
        
        Executable Info:
        - File: ${{ matrix.executable_name }}
        - Size: ${{ env[format('EXECUTABLE_SIZE_{0}', matrix.arch)] }} bytes (${{ env[format('EXECUTABLE_SIZE_MB_{0}', matrix.arch)] }} MB)
        - SHA256: ${{ env[format('EXECUTABLE_HASH_{0}', matrix.arch)] }}
        
        $(if ("${{ matrix.arch }}" -eq "arm64") { 
        "WARNING: This ARM64 executable was cross-compiled on x64 hardware.
        While it should work, native ARM64 builds are recommended for best compatibility.
        Test thoroughly on ARM64 devices before distribution.
        " } else { "" })
        
        Installation:
        1. Download ${{ matrix.executable_name }}
        2. Run the executable (Windows may show security warning)
        3. Configure your WebDAV settings
        "@
        
        $buildInfo | Out-File -FilePath "dist/BUILD_INFO_${{ matrix.arch }}_FALLBACK.txt" -Encoding UTF8
        Write-Host "Build info created for ${{ matrix.arch }}"
      shell: powershell
      
    - name: Upload Build Artifacts (${{ matrix.arch }})
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.run_number }}
        path: |
          dist/${{ matrix.executable_name }}
          dist/BUILD_INFO_${{ matrix.arch }}_FALLBACK.txt
        retention-days: 90

  # Create release after all builds complete
  create-release-fallback:
    needs: build-fallback
    runs-on: ubuntu-latest
    if: github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "*.exe" -exec cp {} ./release-assets/ \;
        find ./artifacts -name "BUILD_INFO_*_FALLBACK.txt" -exec cp {} ./release-assets/ \;
        
        echo "Fallback release assets prepared:"
        ls -la ./release-assets/
        
    - name: Create Release (Fallback)
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag }}
        name: ${{ github.event.inputs.release_name }}
        draft: true  # Create as draft since this is fallback
        prerelease: false
        generate_release_notes: true
        files: |
          ./release-assets/*
        body: |
          ## PanoramaBridge ${{ github.event.inputs.release_tag }} (Fallback Build)
          
          ⚠️ **This is a fallback release created without native ARM64 runners.**
          
          **Available Downloads:**
          - **PanoramaBridge.exe** - Intel/AMD (x86_64) - Native build ✅
          - **PanoramaBridge-arm64.exe** - ARM64/Snapdragon - Cross-compiled ⚠️
          
          **Important Notes:**
          - The x86_64 version is fully tested and recommended for most users
          - The ARM64 version was cross-compiled and should be tested thoroughly on ARM64 devices
          - Consider using the main release workflow with native ARM64 runners for production releases
          
          **Installation:** Same as regular releases - download and run the appropriate executable.
          
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
